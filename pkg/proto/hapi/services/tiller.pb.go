// Code generated by protoc-gen-go.
// source: hapi/services/tiller.proto
// DO NOT EDIT!

/*
Package services is a generated protocol buffer package.

It is generated from these files:
	hapi/services/tiller.proto

It has these top-level messages:
	ListReleasesRequest
	ListSort
	ListReleasesResponse
	GetReleaseStatusRequest
	GetReleaseStatusResponse
	GetReleaseContentRequest
	GetReleaseContentResponse
	GetReleaseLogsRequest
	GetReleaseLogsResponse
	UpdateReleaseRequest
	UpdateReleaseResponse
	RollbackReleaseRequest
	RollbackReleaseResponse
	InstallReleaseRequest
	InstallReleaseResponse
	UninstallReleaseRequest
	UninstallReleaseResponse
	GetVersionRequest
	GetVersionResponse
	GetHistoryRequest
	GetHistoryResponse
	TestReleaseRequest
	TestReleaseResponse
*/
package services

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hapi_chart3 "k8s.io/helm/pkg/proto/hapi/chart"
import hapi_chart "k8s.io/helm/pkg/proto/hapi/chart"
import hapi_release5 "k8s.io/helm/pkg/proto/hapi/release"
import hapi_release6 "k8s.io/helm/pkg/proto/hapi/release"
import hapi_release4 "k8s.io/helm/pkg/proto/hapi/release"
import hapi_release3 "k8s.io/helm/pkg/proto/hapi/release"
import hapi_version "k8s.io/helm/pkg/proto/hapi/version"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// SortBy defines sort operations.
type ListSort_SortBy int32

const (
	ListSort_UNKNOWN       ListSort_SortBy = 0
	ListSort_NAME          ListSort_SortBy = 1
	ListSort_LAST_RELEASED ListSort_SortBy = 2
)

var ListSort_SortBy_name = map[int32]string{
	0: "UNKNOWN",
	1: "NAME",
	2: "LAST_RELEASED",
}
var ListSort_SortBy_value = map[string]int32{
	"UNKNOWN":       0,
	"NAME":          1,
	"LAST_RELEASED": 2,
}

func (x ListSort_SortBy) String() string {
	return proto.EnumName(ListSort_SortBy_name, int32(x))
}
func (ListSort_SortBy) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// SortOrder defines sort orders to augment sorting operations.
type ListSort_SortOrder int32

const (
	ListSort_ASC  ListSort_SortOrder = 0
	ListSort_DESC ListSort_SortOrder = 1
)

var ListSort_SortOrder_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}
var ListSort_SortOrder_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x ListSort_SortOrder) String() string {
	return proto.EnumName(ListSort_SortOrder_name, int32(x))
}
func (ListSort_SortOrder) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

// ListReleasesRequest requests a list of releases.
//
// Releases can be retrieved in chunks by setting limit and offset.
//
// Releases can be sorted according to a few pre-determined sort stategies.
type ListReleasesRequest struct {
	// Limit is the maximum number of releases to be returned.
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset is the last release name that was seen. The next listing
	// operation will start with the name after this one.
	// Example: If list one returns albert, bernie, carl, and sets 'next: dennis'.
	// dennis is the offset. Supplying 'dennis' for the next request should
	// cause the next batch to return a set of results starting with 'dennis'.
	Offset string `protobuf:"bytes,2,opt,name=offset" json:"offset,omitempty"`
	// SortBy is the sort field that the ListReleases server should sort data before returning.
	SortBy ListSort_SortBy `protobuf:"varint,3,opt,name=sort_by,json=sortBy,enum=hapi.services.tiller.ListSort_SortBy" json:"sort_by,omitempty"`
	// Filter is a regular expression used to filter which releases should be listed.
	//
	// Anything that matches the regexp will be included in the results.
	Filter string `protobuf:"bytes,4,opt,name=filter" json:"filter,omitempty"`
	// SortOrder is the ordering directive used for sorting.
	SortOrder   ListSort_SortOrder          `protobuf:"varint,5,opt,name=sort_order,json=sortOrder,enum=hapi.services.tiller.ListSort_SortOrder" json:"sort_order,omitempty"`
	StatusCodes []hapi_release3.Status_Code `protobuf:"varint,6,rep,packed,name=status_codes,json=statusCodes,enum=hapi.release.Status_Code" json:"status_codes,omitempty"`
	// Namespace is the filter to select releases only from a specific namespace.
	Namespace string `protobuf:"bytes,7,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *ListReleasesRequest) Reset()                    { *m = ListReleasesRequest{} }
func (m *ListReleasesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListReleasesRequest) ProtoMessage()               {}
func (*ListReleasesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ListSort defines sorting fields on a release list.
type ListSort struct {
}

func (m *ListSort) Reset()                    { *m = ListSort{} }
func (m *ListSort) String() string            { return proto.CompactTextString(m) }
func (*ListSort) ProtoMessage()               {}
func (*ListSort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ListReleasesResponse is a list of releases.
type ListReleasesResponse struct {
	// Count is the expected total number of releases to be returned.
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	// Next is the name of the next release. If this is other than an empty
	// string, it means there are more results.
	Next string `protobuf:"bytes,2,opt,name=next" json:"next,omitempty"`
	// Total is the total number of queryable releases.
	Total int64 `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
	// Releases is the list of found release objects.
	Releases []*hapi_release5.Release `protobuf:"bytes,4,rep,name=releases" json:"releases,omitempty"`
}

func (m *ListReleasesResponse) Reset()                    { *m = ListReleasesResponse{} }
func (m *ListReleasesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListReleasesResponse) ProtoMessage()               {}
func (*ListReleasesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListReleasesResponse) GetReleases() []*hapi_release5.Release {
	if m != nil {
		return m.Releases
	}
	return nil
}

// GetReleaseStatusRequest is a request to get the status of a release.
type GetReleaseStatusRequest struct {
	// Name is the name of the release
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Version is the version of the release
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *GetReleaseStatusRequest) Reset()                    { *m = GetReleaseStatusRequest{} }
func (m *GetReleaseStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetReleaseStatusRequest) ProtoMessage()               {}
func (*GetReleaseStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// GetReleaseStatusResponse is the response indicating the status of the named release.
type GetReleaseStatusResponse struct {
	// Name is the name of the release.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Info contains information about the release.
	Info *hapi_release4.Info `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	// Namesapce the release was released into
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *GetReleaseStatusResponse) Reset()                    { *m = GetReleaseStatusResponse{} }
func (m *GetReleaseStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*GetReleaseStatusResponse) ProtoMessage()               {}
func (*GetReleaseStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetReleaseStatusResponse) GetInfo() *hapi_release4.Info {
	if m != nil {
		return m.Info
	}
	return nil
}

// GetReleaseContentRequest is a request to get the contents of a release.
type GetReleaseContentRequest struct {
	// The name of the release
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Version is the version of the release
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *GetReleaseContentRequest) Reset()                    { *m = GetReleaseContentRequest{} }
func (m *GetReleaseContentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetReleaseContentRequest) ProtoMessage()               {}
func (*GetReleaseContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// GetReleaseContentResponse is a response containing the contents of a release.
type GetReleaseContentResponse struct {
	// The release content
	Release *hapi_release5.Release `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
}

func (m *GetReleaseContentResponse) Reset()                    { *m = GetReleaseContentResponse{} }
func (m *GetReleaseContentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetReleaseContentResponse) ProtoMessage()               {}
func (*GetReleaseContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetReleaseContentResponse) GetRelease() *hapi_release5.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type GetReleaseLogsRequest struct {
	// Name is the name of the release
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Version is the version of the release
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *GetReleaseLogsRequest) Reset()                    { *m = GetReleaseLogsRequest{} }
func (m *GetReleaseLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetReleaseLogsRequest) ProtoMessage()               {}
func (*GetReleaseLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type GetReleaseLogsResponse struct {
	Log *hapi_release6.Log `protobuf:"bytes,1,opt,name=log" json:"log,omitempty"`
}

func (m *GetReleaseLogsResponse) Reset()                    { *m = GetReleaseLogsResponse{} }
func (m *GetReleaseLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetReleaseLogsResponse) ProtoMessage()               {}
func (*GetReleaseLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetReleaseLogsResponse) GetLog() *hapi_release6.Log {
	if m != nil {
		return m.Log
	}
	return nil
}

// UpdateReleaseRequest updates a release.
type UpdateReleaseRequest struct {
	// The name of the release
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Chart is the protobuf representation of a chart.
	Chart *hapi_chart3.Chart `protobuf:"bytes,2,opt,name=chart" json:"chart,omitempty"`
	// Values is a string containing (unparsed) YAML values.
	Values *hapi_chart.Config `protobuf:"bytes,3,opt,name=values" json:"values,omitempty"`
	// dry_run, if true, will run through the release logic, but neither create
	DryRun bool `protobuf:"varint,4,opt,name=dry_run,json=dryRun" json:"dry_run,omitempty"`
	// DisableHooks causes the server to skip running any hooks for the upgrade.
	DisableHooks bool `protobuf:"varint,5,opt,name=disable_hooks,json=disableHooks" json:"disable_hooks,omitempty"`
	// Performs pods restart for resources if applicable
	Recreate bool `protobuf:"varint,6,opt,name=recreate" json:"recreate,omitempty"`
	// timeout specifies the max amount of time any kubernetes client command can run.
	Timeout int64 `protobuf:"varint,7,opt,name=timeout" json:"timeout,omitempty"`
	// ResetValues will cause Tiller to ignore stored values, resetting to default values.
	ResetValues bool `protobuf:"varint,8,opt,name=reset_values,json=resetValues" json:"reset_values,omitempty"`
	// wait, if true, will wait until all Pods, PVCs, and Services are in a ready state
	// before marking the release as successful. It will wait for as long as timeout
	Wait bool `protobuf:"varint,9,opt,name=wait" json:"wait,omitempty"`
	// ReuseValues will cause Tiller to reuse the values from the last release.
	// This is ignored if reset_values is set.
	ReuseValues bool `protobuf:"varint,10,opt,name=reuse_values,json=reuseValues" json:"reuse_values,omitempty"`
}

func (m *UpdateReleaseRequest) Reset()                    { *m = UpdateReleaseRequest{} }
func (m *UpdateReleaseRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateReleaseRequest) ProtoMessage()               {}
func (*UpdateReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateReleaseRequest) GetChart() *hapi_chart3.Chart {
	if m != nil {
		return m.Chart
	}
	return nil
}

func (m *UpdateReleaseRequest) GetValues() *hapi_chart.Config {
	if m != nil {
		return m.Values
	}
	return nil
}

// UpdateReleaseResponse is the response to an update request.
type UpdateReleaseResponse struct {
	Release *hapi_release5.Release `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
}

func (m *UpdateReleaseResponse) Reset()                    { *m = UpdateReleaseResponse{} }
func (m *UpdateReleaseResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateReleaseResponse) ProtoMessage()               {}
func (*UpdateReleaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateReleaseResponse) GetRelease() *hapi_release5.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type RollbackReleaseRequest struct {
	// The name of the release
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// dry_run, if true, will run through the release logic but no create
	DryRun bool `protobuf:"varint,2,opt,name=dry_run,json=dryRun" json:"dry_run,omitempty"`
	// DisableHooks causes the server to skip running any hooks for the rollback
	DisableHooks bool `protobuf:"varint,3,opt,name=disable_hooks,json=disableHooks" json:"disable_hooks,omitempty"`
	// Version is the version of the release to deploy.
	Version int32 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	// Performs pods restart for resources if applicable
	Recreate bool `protobuf:"varint,5,opt,name=recreate" json:"recreate,omitempty"`
	// timeout specifies the max amount of time any kubernetes client command can run.
	Timeout int64 `protobuf:"varint,6,opt,name=timeout" json:"timeout,omitempty"`
	// wait, if true, will wait until all Pods, PVCs, and Services are in a ready state
	// before marking the release as successful. It will wait for as long as timeout
	Wait bool `protobuf:"varint,7,opt,name=wait" json:"wait,omitempty"`
}

func (m *RollbackReleaseRequest) Reset()                    { *m = RollbackReleaseRequest{} }
func (m *RollbackReleaseRequest) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseRequest) ProtoMessage()               {}
func (*RollbackReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// RollbackReleaseResponse is the response to an update request.
type RollbackReleaseResponse struct {
	Release *hapi_release5.Release `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
}

func (m *RollbackReleaseResponse) Reset()                    { *m = RollbackReleaseResponse{} }
func (m *RollbackReleaseResponse) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseResponse) ProtoMessage()               {}
func (*RollbackReleaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RollbackReleaseResponse) GetRelease() *hapi_release5.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

// InstallReleaseRequest is the request for an installation of a chart.
type InstallReleaseRequest struct {
	// Chart is the protobuf representation of a chart.
	Chart *hapi_chart3.Chart `protobuf:"bytes,1,opt,name=chart" json:"chart,omitempty"`
	// Values is a string containing (unparsed) YAML values.
	Values *hapi_chart.Config `protobuf:"bytes,2,opt,name=values" json:"values,omitempty"`
	// DryRun, if true, will run through the release logic, but neither create
	// a release object nor deploy to Kubernetes. The release object returned
	// in the response will be fake.
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun" json:"dry_run,omitempty"`
	// Name is the candidate release name. This must be unique to the
	// namespace, otherwise the server will return an error. If it is not
	// supplied, the server will autogenerate one.
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// DisableHooks causes the server to skip running any hooks for the install.
	DisableHooks bool `protobuf:"varint,5,opt,name=disable_hooks,json=disableHooks" json:"disable_hooks,omitempty"`
	// Namepace is the kubernetes namespace of the release.
	Namespace string `protobuf:"bytes,6,opt,name=namespace" json:"namespace,omitempty"`
	// ReuseName requests that Tiller re-uses a name, instead of erroring out.
	ReuseName bool `protobuf:"varint,7,opt,name=reuse_name,json=reuseName" json:"reuse_name,omitempty"`
	// timeout specifies the max amount of time any kubernetes client command can run.
	Timeout int64 `protobuf:"varint,8,opt,name=timeout" json:"timeout,omitempty"`
	// wait, if true, will wait until all Pods, PVCs, and Services are in a ready state
	// before marking the release as successful. It will wait for as long as timeout
	Wait bool `protobuf:"varint,9,opt,name=wait" json:"wait,omitempty"`
}

func (m *InstallReleaseRequest) Reset()                    { *m = InstallReleaseRequest{} }
func (m *InstallReleaseRequest) String() string            { return proto.CompactTextString(m) }
func (*InstallReleaseRequest) ProtoMessage()               {}
func (*InstallReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *InstallReleaseRequest) GetChart() *hapi_chart3.Chart {
	if m != nil {
		return m.Chart
	}
	return nil
}

func (m *InstallReleaseRequest) GetValues() *hapi_chart.Config {
	if m != nil {
		return m.Values
	}
	return nil
}

// InstallReleaseResponse is the response from a release installation.
type InstallReleaseResponse struct {
	Release *hapi_release5.Release `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
}

func (m *InstallReleaseResponse) Reset()                    { *m = InstallReleaseResponse{} }
func (m *InstallReleaseResponse) String() string            { return proto.CompactTextString(m) }
func (*InstallReleaseResponse) ProtoMessage()               {}
func (*InstallReleaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *InstallReleaseResponse) GetRelease() *hapi_release5.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

// UninstallReleaseRequest represents a request to uninstall a named release.
type UninstallReleaseRequest struct {
	// Name is the name of the release to delete.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// DisableHooks causes the server to skip running any hooks for the uninstall.
	DisableHooks bool `protobuf:"varint,2,opt,name=disable_hooks,json=disableHooks" json:"disable_hooks,omitempty"`
	// Purge removes the release from the store and make its name free for later use.
	Purge bool `protobuf:"varint,3,opt,name=purge" json:"purge,omitempty"`
	// timeout specifies the max amount of time any kubernetes client command can run.
	Timeout int64 `protobuf:"varint,4,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *UninstallReleaseRequest) Reset()                    { *m = UninstallReleaseRequest{} }
func (m *UninstallReleaseRequest) String() string            { return proto.CompactTextString(m) }
func (*UninstallReleaseRequest) ProtoMessage()               {}
func (*UninstallReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// UninstallReleaseResponse represents a successful response to an uninstall request.
type UninstallReleaseResponse struct {
	// Release is the release that was marked deleted.
	Release *hapi_release5.Release `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
	// Info is an uninstall message
	Info string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *UninstallReleaseResponse) Reset()                    { *m = UninstallReleaseResponse{} }
func (m *UninstallReleaseResponse) String() string            { return proto.CompactTextString(m) }
func (*UninstallReleaseResponse) ProtoMessage()               {}
func (*UninstallReleaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UninstallReleaseResponse) GetRelease() *hapi_release5.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

// GetVersionRequest requests for version information.
type GetVersionRequest struct {
}

func (m *GetVersionRequest) Reset()                    { *m = GetVersionRequest{} }
func (m *GetVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetVersionRequest) ProtoMessage()               {}
func (*GetVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type GetVersionResponse struct {
	Version *hapi_version.Version `protobuf:"bytes,1,opt,name=Version,json=version" json:"Version,omitempty"`
}

func (m *GetVersionResponse) Reset()                    { *m = GetVersionResponse{} }
func (m *GetVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetVersionResponse) ProtoMessage()               {}
func (*GetVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetVersionResponse) GetVersion() *hapi_version.Version {
	if m != nil {
		return m.Version
	}
	return nil
}

// GetHistoryRequest requests a release's history.
type GetHistoryRequest struct {
	// The name of the release.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The maximum number of releases to include.
	Max int32 `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
}

func (m *GetHistoryRequest) Reset()                    { *m = GetHistoryRequest{} }
func (m *GetHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHistoryRequest) ProtoMessage()               {}
func (*GetHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

// GetHistoryResponse is received in response to a GetHistory rpc.
type GetHistoryResponse struct {
	Releases []*hapi_release5.Release `protobuf:"bytes,1,rep,name=releases" json:"releases,omitempty"`
}

func (m *GetHistoryResponse) Reset()                    { *m = GetHistoryResponse{} }
func (m *GetHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHistoryResponse) ProtoMessage()               {}
func (*GetHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetHistoryResponse) GetReleases() []*hapi_release5.Release {
	if m != nil {
		return m.Releases
	}
	return nil
}

// TestReleaseRequest is a request to get the status of a release.
type TestReleaseRequest struct {
	// Name is the name of the release
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// timeout specifies the max amount of time any kubernetes client command can run.
	Timeout int64 `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
	// cleanup specifies whether or not to attempt pod deletion after test completes
	Cleanup bool `protobuf:"varint,3,opt,name=cleanup" json:"cleanup,omitempty"`
}

func (m *TestReleaseRequest) Reset()                    { *m = TestReleaseRequest{} }
func (m *TestReleaseRequest) String() string            { return proto.CompactTextString(m) }
func (*TestReleaseRequest) ProtoMessage()               {}
func (*TestReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

// TestReleaseResponse represents a message from executing a test
type TestReleaseResponse struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *TestReleaseResponse) Reset()                    { *m = TestReleaseResponse{} }
func (m *TestReleaseResponse) String() string            { return proto.CompactTextString(m) }
func (*TestReleaseResponse) ProtoMessage()               {}
func (*TestReleaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func init() {
	proto.RegisterType((*ListReleasesRequest)(nil), "hapi.services.tiller.ListReleasesRequest")
	proto.RegisterType((*ListSort)(nil), "hapi.services.tiller.ListSort")
	proto.RegisterType((*ListReleasesResponse)(nil), "hapi.services.tiller.ListReleasesResponse")
	proto.RegisterType((*GetReleaseStatusRequest)(nil), "hapi.services.tiller.GetReleaseStatusRequest")
	proto.RegisterType((*GetReleaseStatusResponse)(nil), "hapi.services.tiller.GetReleaseStatusResponse")
	proto.RegisterType((*GetReleaseContentRequest)(nil), "hapi.services.tiller.GetReleaseContentRequest")
	proto.RegisterType((*GetReleaseContentResponse)(nil), "hapi.services.tiller.GetReleaseContentResponse")
	proto.RegisterType((*GetReleaseLogsRequest)(nil), "hapi.services.tiller.GetReleaseLogsRequest")
	proto.RegisterType((*GetReleaseLogsResponse)(nil), "hapi.services.tiller.GetReleaseLogsResponse")
	proto.RegisterType((*UpdateReleaseRequest)(nil), "hapi.services.tiller.UpdateReleaseRequest")
	proto.RegisterType((*UpdateReleaseResponse)(nil), "hapi.services.tiller.UpdateReleaseResponse")
	proto.RegisterType((*RollbackReleaseRequest)(nil), "hapi.services.tiller.RollbackReleaseRequest")
	proto.RegisterType((*RollbackReleaseResponse)(nil), "hapi.services.tiller.RollbackReleaseResponse")
	proto.RegisterType((*InstallReleaseRequest)(nil), "hapi.services.tiller.InstallReleaseRequest")
	proto.RegisterType((*InstallReleaseResponse)(nil), "hapi.services.tiller.InstallReleaseResponse")
	proto.RegisterType((*UninstallReleaseRequest)(nil), "hapi.services.tiller.UninstallReleaseRequest")
	proto.RegisterType((*UninstallReleaseResponse)(nil), "hapi.services.tiller.UninstallReleaseResponse")
	proto.RegisterType((*GetVersionRequest)(nil), "hapi.services.tiller.GetVersionRequest")
	proto.RegisterType((*GetVersionResponse)(nil), "hapi.services.tiller.GetVersionResponse")
	proto.RegisterType((*GetHistoryRequest)(nil), "hapi.services.tiller.GetHistoryRequest")
	proto.RegisterType((*GetHistoryResponse)(nil), "hapi.services.tiller.GetHistoryResponse")
	proto.RegisterType((*TestReleaseRequest)(nil), "hapi.services.tiller.TestReleaseRequest")
	proto.RegisterType((*TestReleaseResponse)(nil), "hapi.services.tiller.TestReleaseResponse")
	proto.RegisterEnum("hapi.services.tiller.ListSort_SortBy", ListSort_SortBy_name, ListSort_SortBy_value)
	proto.RegisterEnum("hapi.services.tiller.ListSort_SortOrder", ListSort_SortOrder_name, ListSort_SortOrder_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ReleaseService service

type ReleaseServiceClient interface {
	// ListReleases retrieves release history.
	// TODO: Allow filtering the set of releases by
	// release status. By default, ListAllReleases returns the releases who
	// current status is "Active".
	ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (ReleaseService_ListReleasesClient, error)
	// GetReleasesStatus retrieves status information for the specified release.
	GetReleaseStatus(ctx context.Context, in *GetReleaseStatusRequest, opts ...grpc.CallOption) (*GetReleaseStatusResponse, error)
	// GetReleaseContent retrieves the release content (chart + value) for the specified release.
	GetReleaseContent(ctx context.Context, in *GetReleaseContentRequest, opts ...grpc.CallOption) (*GetReleaseContentResponse, error)
	// GetReleaseLogs returns a stream of logging information from the release
	GetReleaseLogs(ctx context.Context, opts ...grpc.CallOption) (ReleaseService_GetReleaseLogsClient, error)
	// UpdateRelease updates release content.
	UpdateRelease(ctx context.Context, in *UpdateReleaseRequest, opts ...grpc.CallOption) (*UpdateReleaseResponse, error)
	// InstallRelease requests installation of a chart as a new release.
	InstallRelease(ctx context.Context, in *InstallReleaseRequest, opts ...grpc.CallOption) (*InstallReleaseResponse, error)
	// UninstallRelease requests deletion of a named release.
	UninstallRelease(ctx context.Context, in *UninstallReleaseRequest, opts ...grpc.CallOption) (*UninstallReleaseResponse, error)
	// GetVersion returns the current version of the server.
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// RollbackRelease rolls back a release to a previous version.
	RollbackRelease(ctx context.Context, in *RollbackReleaseRequest, opts ...grpc.CallOption) (*RollbackReleaseResponse, error)
	// ReleaseHistory retrieves a releasse's history.
	GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error)
	// RunReleaseTest executes the tests defined of a named release
	RunReleaseTest(ctx context.Context, in *TestReleaseRequest, opts ...grpc.CallOption) (ReleaseService_RunReleaseTestClient, error)
}

type releaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewReleaseServiceClient(cc *grpc.ClientConn) ReleaseServiceClient {
	return &releaseServiceClient{cc}
}

func (c *releaseServiceClient) ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (ReleaseService_ListReleasesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ReleaseService_serviceDesc.Streams[0], c.cc, "/hapi.services.tiller.ReleaseService/ListReleases", opts...)
	if err != nil {
		return nil, err
	}
	x := &releaseServiceListReleasesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReleaseService_ListReleasesClient interface {
	Recv() (*ListReleasesResponse, error)
	grpc.ClientStream
}

type releaseServiceListReleasesClient struct {
	grpc.ClientStream
}

func (x *releaseServiceListReleasesClient) Recv() (*ListReleasesResponse, error) {
	m := new(ListReleasesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *releaseServiceClient) GetReleaseStatus(ctx context.Context, in *GetReleaseStatusRequest, opts ...grpc.CallOption) (*GetReleaseStatusResponse, error) {
	out := new(GetReleaseStatusResponse)
	err := grpc.Invoke(ctx, "/hapi.services.tiller.ReleaseService/GetReleaseStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) GetReleaseContent(ctx context.Context, in *GetReleaseContentRequest, opts ...grpc.CallOption) (*GetReleaseContentResponse, error) {
	out := new(GetReleaseContentResponse)
	err := grpc.Invoke(ctx, "/hapi.services.tiller.ReleaseService/GetReleaseContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) GetReleaseLogs(ctx context.Context, opts ...grpc.CallOption) (ReleaseService_GetReleaseLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ReleaseService_serviceDesc.Streams[1], c.cc, "/hapi.services.tiller.ReleaseService/GetReleaseLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &releaseServiceGetReleaseLogsClient{stream}
	return x, nil
}

type ReleaseService_GetReleaseLogsClient interface {
	Send(*GetReleaseLogsRequest) error
	Recv() (*GetReleaseLogsResponse, error)
	grpc.ClientStream
}

type releaseServiceGetReleaseLogsClient struct {
	grpc.ClientStream
}

func (x *releaseServiceGetReleaseLogsClient) Send(m *GetReleaseLogsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *releaseServiceGetReleaseLogsClient) Recv() (*GetReleaseLogsResponse, error) {
	m := new(GetReleaseLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *releaseServiceClient) UpdateRelease(ctx context.Context, in *UpdateReleaseRequest, opts ...grpc.CallOption) (*UpdateReleaseResponse, error) {
	out := new(UpdateReleaseResponse)
	err := grpc.Invoke(ctx, "/hapi.services.tiller.ReleaseService/UpdateRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) InstallRelease(ctx context.Context, in *InstallReleaseRequest, opts ...grpc.CallOption) (*InstallReleaseResponse, error) {
	out := new(InstallReleaseResponse)
	err := grpc.Invoke(ctx, "/hapi.services.tiller.ReleaseService/InstallRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) UninstallRelease(ctx context.Context, in *UninstallReleaseRequest, opts ...grpc.CallOption) (*UninstallReleaseResponse, error) {
	out := new(UninstallReleaseResponse)
	err := grpc.Invoke(ctx, "/hapi.services.tiller.ReleaseService/UninstallRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := grpc.Invoke(ctx, "/hapi.services.tiller.ReleaseService/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) RollbackRelease(ctx context.Context, in *RollbackReleaseRequest, opts ...grpc.CallOption) (*RollbackReleaseResponse, error) {
	out := new(RollbackReleaseResponse)
	err := grpc.Invoke(ctx, "/hapi.services.tiller.ReleaseService/RollbackRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error) {
	out := new(GetHistoryResponse)
	err := grpc.Invoke(ctx, "/hapi.services.tiller.ReleaseService/GetHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) RunReleaseTest(ctx context.Context, in *TestReleaseRequest, opts ...grpc.CallOption) (ReleaseService_RunReleaseTestClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ReleaseService_serviceDesc.Streams[2], c.cc, "/hapi.services.tiller.ReleaseService/RunReleaseTest", opts...)
	if err != nil {
		return nil, err
	}
	x := &releaseServiceRunReleaseTestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReleaseService_RunReleaseTestClient interface {
	Recv() (*TestReleaseResponse, error)
	grpc.ClientStream
}

type releaseServiceRunReleaseTestClient struct {
	grpc.ClientStream
}

func (x *releaseServiceRunReleaseTestClient) Recv() (*TestReleaseResponse, error) {
	m := new(TestReleaseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ReleaseService service

type ReleaseServiceServer interface {
	// ListReleases retrieves release history.
	// TODO: Allow filtering the set of releases by
	// release status. By default, ListAllReleases returns the releases who
	// current status is "Active".
	ListReleases(*ListReleasesRequest, ReleaseService_ListReleasesServer) error
	// GetReleasesStatus retrieves status information for the specified release.
	GetReleaseStatus(context.Context, *GetReleaseStatusRequest) (*GetReleaseStatusResponse, error)
	// GetReleaseContent retrieves the release content (chart + value) for the specified release.
	GetReleaseContent(context.Context, *GetReleaseContentRequest) (*GetReleaseContentResponse, error)
	// GetReleaseLogs returns a stream of logging information from the release
	GetReleaseLogs(ReleaseService_GetReleaseLogsServer) error
	// UpdateRelease updates release content.
	UpdateRelease(context.Context, *UpdateReleaseRequest) (*UpdateReleaseResponse, error)
	// InstallRelease requests installation of a chart as a new release.
	InstallRelease(context.Context, *InstallReleaseRequest) (*InstallReleaseResponse, error)
	// UninstallRelease requests deletion of a named release.
	UninstallRelease(context.Context, *UninstallReleaseRequest) (*UninstallReleaseResponse, error)
	// GetVersion returns the current version of the server.
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// RollbackRelease rolls back a release to a previous version.
	RollbackRelease(context.Context, *RollbackReleaseRequest) (*RollbackReleaseResponse, error)
	// ReleaseHistory retrieves a releasse's history.
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error)
	// RunReleaseTest executes the tests defined of a named release
	RunReleaseTest(*TestReleaseRequest, ReleaseService_RunReleaseTestServer) error
}

func RegisterReleaseServiceServer(s *grpc.Server, srv ReleaseServiceServer) {
	s.RegisterService(&_ReleaseService_serviceDesc, srv)
}

func _ReleaseService_ListReleases_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListReleasesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReleaseServiceServer).ListReleases(m, &releaseServiceListReleasesServer{stream})
}

type ReleaseService_ListReleasesServer interface {
	Send(*ListReleasesResponse) error
	grpc.ServerStream
}

type releaseServiceListReleasesServer struct {
	grpc.ServerStream
}

func (x *releaseServiceListReleasesServer) Send(m *ListReleasesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReleaseService_GetReleaseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).GetReleaseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.tiller.ReleaseService/GetReleaseStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).GetReleaseStatus(ctx, req.(*GetReleaseStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseService_GetReleaseContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).GetReleaseContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.tiller.ReleaseService/GetReleaseContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).GetReleaseContent(ctx, req.(*GetReleaseContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseService_GetReleaseLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReleaseServiceServer).GetReleaseLogs(&releaseServiceGetReleaseLogsServer{stream})
}

type ReleaseService_GetReleaseLogsServer interface {
	Send(*GetReleaseLogsResponse) error
	Recv() (*GetReleaseLogsRequest, error)
	grpc.ServerStream
}

type releaseServiceGetReleaseLogsServer struct {
	grpc.ServerStream
}

func (x *releaseServiceGetReleaseLogsServer) Send(m *GetReleaseLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *releaseServiceGetReleaseLogsServer) Recv() (*GetReleaseLogsRequest, error) {
	m := new(GetReleaseLogsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ReleaseService_UpdateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).UpdateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.tiller.ReleaseService/UpdateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).UpdateRelease(ctx, req.(*UpdateReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseService_InstallRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).InstallRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.tiller.ReleaseService/InstallRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).InstallRelease(ctx, req.(*InstallReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseService_UninstallRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).UninstallRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.tiller.ReleaseService/UninstallRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).UninstallRelease(ctx, req.(*UninstallReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.tiller.ReleaseService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseService_RollbackRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).RollbackRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.tiller.ReleaseService/RollbackRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).RollbackRelease(ctx, req.(*RollbackReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseService_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.tiller.ReleaseService/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).GetHistory(ctx, req.(*GetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseService_RunReleaseTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestReleaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReleaseServiceServer).RunReleaseTest(m, &releaseServiceRunReleaseTestServer{stream})
}

type ReleaseService_RunReleaseTestServer interface {
	Send(*TestReleaseResponse) error
	grpc.ServerStream
}

type releaseServiceRunReleaseTestServer struct {
	grpc.ServerStream
}

func (x *releaseServiceRunReleaseTestServer) Send(m *TestReleaseResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ReleaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hapi.services.tiller.ReleaseService",
	HandlerType: (*ReleaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReleaseStatus",
			Handler:    _ReleaseService_GetReleaseStatus_Handler,
		},
		{
			MethodName: "GetReleaseContent",
			Handler:    _ReleaseService_GetReleaseContent_Handler,
		},
		{
			MethodName: "UpdateRelease",
			Handler:    _ReleaseService_UpdateRelease_Handler,
		},
		{
			MethodName: "InstallRelease",
			Handler:    _ReleaseService_InstallRelease_Handler,
		},
		{
			MethodName: "UninstallRelease",
			Handler:    _ReleaseService_UninstallRelease_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ReleaseService_GetVersion_Handler,
		},
		{
			MethodName: "RollbackRelease",
			Handler:    _ReleaseService_RollbackRelease_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _ReleaseService_GetHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListReleases",
			Handler:       _ReleaseService_ListReleases_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetReleaseLogs",
			Handler:       _ReleaseService_GetReleaseLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RunReleaseTest",
			Handler:       _ReleaseService_RunReleaseTest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("hapi/services/tiller.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0x8e, 0x2c, 0xc7, 0x3f, 0x27, 0x69, 0x70, 0xb7, 0x89, 0xa3, 0x6a, 0x80, 0x09, 0xea, 0x40,
	0xdd, 0x96, 0x3a, 0xc5, 0x5c, 0x31, 0x03, 0xcc, 0xa4, 0xa9, 0x27, 0x29, 0x98, 0x74, 0x46, 0x6e,
	0xcb, 0x0c, 0xc3, 0xe0, 0x51, 0xec, 0xb5, 0x2b, 0x2a, 0x6b, 0x5d, 0xed, 0x2a, 0x34, 0xb7, 0xdc,
	0xf1, 0x28, 0xbc, 0x05, 0x2f, 0x40, 0x9f, 0x89, 0xd1, 0xfe, 0xc8, 0x5e, 0x45, 0x4a, 0x84, 0x6f,
	0xac, 0xdd, 0x3d, 0x67, 0xcf, 0xcf, 0x77, 0x4e, 0xbe, 0x3d, 0x01, 0xfb, 0x8d, 0xb7, 0xf0, 0x0f,
	0x29, 0x8e, 0x2e, 0xfc, 0x31, 0xa6, 0x87, 0xcc, 0x0f, 0x02, 0x1c, 0x75, 0x17, 0x11, 0x61, 0x04,
	0xed, 0x26, 0xb2, 0xae, 0x92, 0x75, 0x85, 0xcc, 0x6e, 0xf3, 0x1b, 0xe3, 0x37, 0x5e, 0xc4, 0xc4,
	0xaf, 0xd0, 0xb6, 0xf7, 0x57, 0xcf, 0x49, 0x38, 0xf5, 0x67, 0x52, 0x20, 0x5c, 0x44, 0x38, 0xc0,
	0x1e, 0xc5, 0xea, 0x2b, 0x65, 0x6d, 0x4d, 0x16, 0x90, 0x99, 0x66, 0x4c, 0x9d, 0xfb, 0xe1, 0x94,
	0x48, 0xc1, 0x5d, 0x4d, 0x40, 0x99, 0xc7, 0x62, 0xaa, 0xf9, 0xb9, 0xc0, 0x11, 0xf5, 0x49, 0xa8,
	0xbe, 0x42, 0xe6, 0xfc, 0x53, 0x81, 0x3b, 0x03, 0x9f, 0x32, 0x57, 0x5c, 0xa4, 0x2e, 0x7e, 0x17,
	0x63, 0xca, 0xd0, 0x2e, 0x6c, 0x06, 0xfe, 0xdc, 0x67, 0x96, 0x71, 0x60, 0x74, 0x4c, 0x57, 0x6c,
	0x50, 0x1b, 0x6a, 0x64, 0x3a, 0xa5, 0x98, 0x59, 0x95, 0x03, 0xa3, 0xd3, 0x74, 0xe5, 0x0e, 0x7d,
	0x0f, 0x75, 0x4a, 0x22, 0x36, 0x3a, 0xbf, 0xb4, 0xcc, 0x03, 0xa3, 0xb3, 0xd3, 0xfb, 0xbc, 0x9b,
	0x07, 0x51, 0x37, 0xf1, 0x34, 0x24, 0x11, 0xeb, 0x26, 0x3f, 0x4f, 0x2f, 0xdd, 0x1a, 0xe5, 0xdf,
	0xc4, 0xee, 0xd4, 0x0f, 0x18, 0x8e, 0xac, 0xaa, 0xb0, 0x2b, 0x76, 0xe8, 0x04, 0x80, 0xdb, 0x25,
	0xd1, 0x04, 0x47, 0xd6, 0x26, 0x37, 0xdd, 0x29, 0x61, 0xfa, 0x45, 0xa2, 0xef, 0x36, 0xa9, 0x5a,
	0xa2, 0x6f, 0x61, 0x5b, 0x40, 0x32, 0x1a, 0x93, 0x09, 0xa6, 0x56, 0xed, 0xc0, 0xec, 0xec, 0xf4,
	0xee, 0x0a, 0x53, 0x0a, 0xf9, 0xa1, 0x00, 0xed, 0x98, 0x4c, 0xb0, 0xbb, 0x25, 0xd4, 0x93, 0x35,
	0x45, 0x1f, 0x43, 0x33, 0xf4, 0xe6, 0x98, 0x2e, 0xbc, 0x31, 0xb6, 0xea, 0x3c, 0xc2, 0xe5, 0x81,
	0xf3, 0x1b, 0x34, 0x94, 0x73, 0xa7, 0x07, 0x35, 0x91, 0x1a, 0xda, 0x82, 0xfa, 0xab, 0xb3, 0x1f,
	0xcf, 0x5e, 0xfc, 0x7c, 0xd6, 0xda, 0x40, 0x0d, 0xa8, 0x9e, 0x1d, 0xfd, 0xd4, 0x6f, 0x19, 0xe8,
	0x36, 0xdc, 0x1a, 0x1c, 0x0d, 0x5f, 0x8e, 0xdc, 0xfe, 0xa0, 0x7f, 0x34, 0xec, 0x3f, 0x6b, 0x55,
	0x9c, 0x4f, 0xa1, 0x99, 0xc6, 0x8c, 0xea, 0x60, 0x1e, 0x0d, 0x8f, 0xc5, 0x95, 0x67, 0xfd, 0xe1,
	0x71, 0xcb, 0x70, 0xfe, 0x32, 0x60, 0x57, 0x2f, 0x11, 0x5d, 0x90, 0x90, 0xe2, 0xa4, 0x46, 0x63,
	0x12, 0x87, 0x69, 0x8d, 0xf8, 0x06, 0x21, 0xa8, 0x86, 0xf8, 0xbd, 0xaa, 0x10, 0x5f, 0x27, 0x9a,
	0x8c, 0x30, 0x2f, 0xe0, 0xd5, 0x31, 0x5d, 0xb1, 0x41, 0x5f, 0x41, 0x43, 0xa6, 0x4e, 0xad, 0xea,
	0x81, 0xd9, 0xd9, 0xea, 0xed, 0xe9, 0x80, 0x48, 0x8f, 0x6e, 0xaa, 0xe6, 0x9c, 0xc0, 0xfe, 0x09,
	0x56, 0x91, 0x08, 0xbc, 0x54, 0xc7, 0x24, 0x7e, 0xbd, 0x39, 0xe6, 0xc1, 0x24, 0x7e, 0xbd, 0x39,
	0x46, 0x16, 0xd4, 0x65, 0xbb, 0xf1, 0x70, 0x36, 0x5d, 0xb5, 0x75, 0x18, 0x58, 0x57, 0x0d, 0xc9,
	0xbc, 0xf2, 0x2c, 0x7d, 0x01, 0xd5, 0xa4, 0xd9, 0xb9, 0x99, 0xad, 0x1e, 0xd2, 0xe3, 0x7c, 0x1e,
	0x4e, 0x89, 0xcb, 0xe5, 0x7a, 0xa9, 0xcc, 0x6c, 0xa9, 0x4e, 0x57, 0xbd, 0x1e, 0x93, 0x90, 0xe1,
	0x90, 0xad, 0x17, 0xff, 0x00, 0xee, 0xe6, 0x58, 0x92, 0x09, 0x1c, 0x42, 0x5d, 0x86, 0xc6, 0xad,
	0x15, 0xe2, 0xaa, 0xb4, 0x9c, 0x3e, 0xec, 0x2d, 0xad, 0x0d, 0xc8, 0x6c, 0x4d, 0x50, 0xbf, 0x83,
	0x76, 0xd6, 0x8c, 0x8c, 0xe8, 0x1e, 0x98, 0x01, 0x99, 0xc9, 0x68, 0x6e, 0xeb, 0xd1, 0x0c, 0xc8,
	0xcc, 0x4d, 0xa4, 0xce, 0xbf, 0x15, 0xd8, 0x7d, 0xb5, 0x98, 0x78, 0x0c, 0xab, 0x00, 0xaf, 0x89,
	0xe2, 0x3e, 0x6c, 0x72, 0x4a, 0x93, 0x15, 0x91, 0x36, 0x05, 0xef, 0x1d, 0x27, 0xbf, 0xae, 0x90,
	0xa3, 0x87, 0x50, 0xbb, 0xf0, 0x82, 0x18, 0x53, 0x5e, 0x8e, 0xb4, 0x76, 0x52, 0x93, 0xf3, 0xa1,
	0x2b, 0x35, 0xd0, 0x3e, 0xd4, 0x27, 0xd1, 0xe5, 0x28, 0x8a, 0x43, 0x4e, 0x04, 0x0d, 0xb7, 0x36,
	0x89, 0x2e, 0xdd, 0x38, 0x44, 0xf7, 0xe0, 0xd6, 0xc4, 0xa7, 0xde, 0x79, 0x80, 0x47, 0x6f, 0x08,
	0x79, 0x4b, 0x39, 0x17, 0x34, 0xdc, 0x6d, 0x79, 0x78, 0x9a, 0x9c, 0x21, 0x3b, 0xe9, 0xe7, 0x71,
	0x84, 0x3d, 0x86, 0xad, 0x1a, 0x97, 0xa7, 0xfb, 0x04, 0x34, 0xe6, 0xcf, 0x31, 0x89, 0x19, 0xff,
	0x03, 0x36, 0x5d, 0xb5, 0x45, 0x9f, 0xc1, 0x76, 0x84, 0x29, 0x66, 0x23, 0x19, 0x65, 0x83, 0xdf,
	0xdc, 0xe2, 0x67, 0xaf, 0x45, 0x58, 0x08, 0xaa, 0x7f, 0x78, 0x3e, 0xb3, 0x9a, 0x5c, 0xc4, 0xd7,
	0xe2, 0x5a, 0x4c, 0xb1, 0xba, 0x06, 0xea, 0x5a, 0x4c, 0xb1, 0xb8, 0xe6, 0x9c, 0xc2, 0x5e, 0x06,
	0xce, 0x75, 0xfb, 0xe3, 0x83, 0x01, 0x6d, 0x97, 0x04, 0xc1, 0xb9, 0x37, 0x7e, 0x5b, 0xa2, 0x36,
	0x2b, 0x30, 0x56, 0xae, 0x87, 0xd1, 0xcc, 0x81, 0x71, 0xa5, 0xbf, 0xaa, 0x5a, 0x7f, 0x69, 0x00,
	0x6f, 0x16, 0x03, 0x5c, 0xd3, 0x01, 0x56, 0xe8, 0xd5, 0x97, 0xe8, 0x39, 0x3f, 0xc0, 0xfe, 0x95,
	0x7c, 0xd6, 0x05, 0xe7, 0xef, 0x0a, 0xec, 0x3d, 0x0f, 0x29, 0xf3, 0x82, 0x20, 0x83, 0x4d, 0xda,
	0xa3, 0x46, 0xe9, 0x1e, 0xad, 0xfc, 0x9f, 0x1e, 0x35, 0x35, 0x70, 0x55, 0x25, 0xaa, 0x2b, 0x95,
	0x28, 0xd5, 0xb7, 0x1a, 0x67, 0xd5, 0x32, 0x9c, 0x85, 0x3e, 0x01, 0x10, 0x8d, 0xc6, 0x8d, 0x0b,
	0x10, 0x9b, 0xfc, 0xe4, 0x4c, 0xb2, 0x81, 0xc2, 0xbd, 0x91, 0x8f, 0xfb, 0x4a, 0xd7, 0x3a, 0xcf,
	0xa1, 0x9d, 0x85, 0x6a, 0x5d, 0xd8, 0xff, 0x34, 0x60, 0xff, 0x55, 0xe8, 0xe7, 0x02, 0x9f, 0xd7,
	0x94, 0x57, 0xa0, 0xa8, 0xe4, 0x40, 0xb1, 0x0b, 0x9b, 0x8b, 0x38, 0x9a, 0x61, 0x09, 0xad, 0xd8,
	0xac, 0xe6, 0x58, 0xd5, 0x72, 0x74, 0x46, 0x60, 0x5d, 0x8d, 0x61, 0xcd, 0x8c, 0x92, 0xa8, 0xd3,
	0x37, 0xa6, 0x29, 0xde, 0x13, 0xe7, 0x0e, 0xdc, 0x3e, 0xc1, 0xec, 0xb5, 0xf8, 0x03, 0x90, 0xe9,
	0x39, 0x7d, 0x40, 0xab, 0x87, 0x4b, 0x7f, 0xf2, 0x48, 0xf7, 0xa7, 0x06, 0x2e, 0xa5, 0x9f, 0xd2,
	0xf5, 0x37, 0xdc, 0xf6, 0xa9, 0x4f, 0x19, 0x89, 0x2e, 0xaf, 0x83, 0xae, 0x05, 0xe6, 0xdc, 0x7b,
	0x2f, 0xd9, 0x3e, 0x59, 0x3a, 0x27, 0x3c, 0x82, 0xf4, 0xaa, 0x8c, 0x60, 0xf5, 0x41, 0x37, 0xca,
	0x3d, 0xe8, 0xbf, 0x02, 0x7a, 0x89, 0xd3, 0xd9, 0xe2, 0x86, 0x67, 0x47, 0x15, 0xa1, 0xa2, 0x37,
	0x9a, 0x05, 0xf5, 0x71, 0x80, 0xbd, 0x30, 0x5e, 0xc8, 0xb2, 0xa9, 0xad, 0x73, 0x1f, 0xee, 0x68,
	0xd6, 0x65, 0x9c, 0x49, 0x3e, 0x74, 0x26, 0xad, 0x27, 0xcb, 0xde, 0x87, 0x26, 0xec, 0xa8, 0x61,
	0x40, 0x0c, 0x76, 0xc8, 0x87, 0xed, 0xd5, 0xa9, 0x07, 0x3d, 0x28, 0x9e, 0xfb, 0x32, 0xc3, 0xab,
	0xfd, 0xb0, 0x8c, 0xaa, 0x88, 0xc5, 0xd9, 0x78, 0x62, 0x20, 0x0a, 0xad, 0xec, 0x30, 0x82, 0x1e,
	0xe7, 0xdb, 0x28, 0x98, 0x7e, 0xec, 0x6e, 0x59, 0x75, 0xe5, 0x16, 0x5d, 0xf0, 0xea, 0xeb, 0x13,
	0x04, 0xba, 0xd1, 0x8c, 0x3e, 0xb4, 0xd8, 0x87, 0xa5, 0xf5, 0x53, 0xbf, 0xef, 0x60, 0x47, 0x1f,
	0x12, 0xd0, 0xa3, 0x9b, 0x8c, 0xac, 0x4c, 0x24, 0xf6, 0x97, 0xe5, 0x94, 0x95, 0xbb, 0x8e, 0xf1,
	0xc4, 0x40, 0xbf, 0xc3, 0x2d, 0xed, 0x21, 0x44, 0x05, 0x05, 0xca, 0x1b, 0x3e, 0xec, 0x47, 0xa5,
	0x74, 0xd3, 0xf4, 0xe6, 0xb0, 0xa3, 0x33, 0x5c, 0x51, 0x7a, 0xb9, 0x4f, 0x46, 0x51, 0x7a, 0xf9,
	0xa4, 0xe9, 0x6c, 0x24, 0xad, 0x93, 0x25, 0xa0, 0xa2, 0xd6, 0x29, 0x20, 0xcb, 0xa2, 0xd6, 0x29,
	0xe2, 0x35, 0x67, 0x03, 0x79, 0x00, 0x4b, 0xfe, 0x41, 0xf7, 0x0b, 0x2b, 0xa2, 0xd3, 0x96, 0xdd,
	0xb9, 0x59, 0x31, 0x75, 0xb1, 0x80, 0x8f, 0x32, 0x0f, 0x34, 0x2a, 0x80, 0x26, 0x7f, 0x2e, 0xb1,
	0x1f, 0x97, 0xd4, 0xce, 0x24, 0x25, 0x29, 0xed, 0x9a, 0xa4, 0x74, 0xbe, 0xbc, 0x26, 0xa9, 0x0c,
	0x3b, 0x3a, 0x1b, 0xc8, 0x87, 0x1d, 0x37, 0x0e, 0xa5, 0xeb, 0x84, 0x98, 0x50, 0xc1, 0xed, 0xab,
	0x94, 0x68, 0x3f, 0x28, 0xa1, 0xb9, 0xa4, 0x94, 0xa7, 0xf0, 0x4b, 0x43, 0xa9, 0x9e, 0xd7, 0xf8,
	0xbf, 0xda, 0x5f, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x78, 0x8f, 0xed, 0x5d, 0x53, 0x10, 0x00,
	0x00,
}
