// Code generated by protoc-gen-go.
// source: hapi/release/log.proto
// DO NOT EDIT!

package release

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Allows filtering by log event source
type LogSource int32

const (
	LogSource_HOOK   LogSource = 0
	LogSource_TEST   LogSource = 1
	LogSource_POD    LogSource = 2
	LogSource_SYSTEM LogSource = 3
)

var LogSource_name = map[int32]string{
	0: "HOOK",
	1: "TEST",
	2: "POD",
	3: "SYSTEM",
}
var LogSource_value = map[string]int32{
	"HOOK":   0,
	"TEST":   1,
	"POD":    2,
	"SYSTEM": 3,
}

func (x LogSource) String() string {
	return proto.EnumName(LogSource_name, int32(x))
}
func (LogSource) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// Syslog log levels
type LogLevel int32

const (
	LogLevel_EMERG   LogLevel = 0
	LogLevel_ALERT   LogLevel = 1
	LogLevel_CRIT    LogLevel = 2
	LogLevel_ERR     LogLevel = 3
	LogLevel_WARNING LogLevel = 4
	LogLevel_NOTICE  LogLevel = 5
	LogLevel_INFO    LogLevel = 6
	LogLevel_DEBUG   LogLevel = 7
)

var LogLevel_name = map[int32]string{
	0: "EMERG",
	1: "ALERT",
	2: "CRIT",
	3: "ERR",
	4: "WARNING",
	5: "NOTICE",
	6: "INFO",
	7: "DEBUG",
}
var LogLevel_value = map[string]int32{
	"EMERG":   0,
	"ALERT":   1,
	"CRIT":    2,
	"ERR":     3,
	"WARNING": 4,
	"NOTICE":  5,
	"INFO":    6,
	"DEBUG":   7,
}

func (x LogLevel) String() string {
	return proto.EnumName(LogLevel_name, int32(x))
}
func (LogLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type LogSubscription struct {
	Release string      `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
	Level   LogLevel    `protobuf:"varint,2,opt,name=level,enum=hapi.release.LogLevel" json:"level,omitempty"`
	Sources []LogSource `protobuf:"varint,3,rep,packed,name=sources,enum=hapi.release.LogSource" json:"sources,omitempty"`
}

func (m *LogSubscription) Reset()                    { *m = LogSubscription{} }
func (m *LogSubscription) String() string            { return proto.CompactTextString(m) }
func (*LogSubscription) ProtoMessage()               {}
func (*LogSubscription) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type Log struct {
	Release   string                     `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
	Level     LogLevel                   `protobuf:"varint,2,opt,name=level,enum=hapi.release.LogLevel" json:"level,omitempty"`
	Source    LogSource                  `protobuf:"varint,3,opt,name=source,enum=hapi.release.LogSource" json:"source,omitempty"`
	Log       string                     `protobuf:"bytes,4,opt,name=log" json:"log,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Log) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*LogSubscription)(nil), "hapi.release.LogSubscription")
	proto.RegisterType((*Log)(nil), "hapi.release.Log")
	proto.RegisterEnum("hapi.release.LogSource", LogSource_name, LogSource_value)
	proto.RegisterEnum("hapi.release.LogLevel", LogLevel_name, LogLevel_value)
}

func init() { proto.RegisterFile("hapi/release/log.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x90, 0xcf, 0x6e, 0x9b, 0x40,
	0x10, 0xc6, 0x8d, 0x97, 0x3f, 0x66, 0x5c, 0xb9, 0xab, 0x3d, 0xb8, 0xc8, 0x97, 0x22, 0x9f, 0x90,
	0x55, 0x81, 0xea, 0xf6, 0xd0, 0xab, 0xff, 0x6c, 0x5d, 0x54, 0x0c, 0xd5, 0x42, 0x55, 0xb5, 0x37,
	0x6c, 0x6d, 0x09, 0x12, 0xce, 0x22, 0xc0, 0x79, 0x8a, 0x3c, 0x59, 0x9e, 0x2a, 0x5a, 0x30, 0x4e,
	0xa4, 0x28, 0xb7, 0xdc, 0x66, 0x77, 0x7e, 0xf3, 0x7d, 0x33, 0x1f, 0x4c, 0x6f, 0xd2, 0x32, 0xf7,
	0x2a, 0x5e, 0xf0, 0xb4, 0xe6, 0x5e, 0x21, 0x32, 0xb7, 0xac, 0x44, 0x23, 0xc8, 0x3b, 0xf9, 0xef,
	0x5e, 0xfe, 0x67, 0x1f, 0x33, 0x21, 0xb2, 0x82, 0x7b, 0x6d, 0xef, 0x70, 0xfe, 0xef, 0x35, 0xf9,
	0x89, 0xd7, 0x4d, 0x7a, 0x2a, 0x3b, 0x7c, 0x7e, 0xaf, 0xc0, 0xfb, 0x40, 0x64, 0xf1, 0xf9, 0x50,
	0x1f, 0xab, 0xbc, 0x6c, 0x72, 0x71, 0x4b, 0x2c, 0x30, 0x2e, 0xf3, 0x96, 0x62, 0x2b, 0x8e, 0xc9,
	0xfa, 0x27, 0xf9, 0x04, 0x5a, 0xc1, 0xef, 0x78, 0x61, 0x0d, 0x6d, 0xc5, 0x99, 0x2c, 0xa7, 0xee,
	0x73, 0x33, 0x37, 0x10, 0x59, 0x20, 0xbb, 0xac, 0x83, 0xc8, 0x67, 0x30, 0x6a, 0x71, 0xae, 0x8e,
	0xbc, 0xb6, 0x90, 0x8d, 0x9c, 0xc9, 0xf2, 0xc3, 0x0b, 0x3e, 0x6e, 0xfb, 0xac, 0xe7, 0xe6, 0x0f,
	0x0a, 0xa0, 0x40, 0x64, 0x6f, 0xb6, 0x82, 0x07, 0x7a, 0x27, 0x6d, 0xa1, 0x16, 0x7f, 0x75, 0x83,
	0x0b, 0x46, 0x30, 0xa0, 0x42, 0x64, 0x96, 0xda, 0x9a, 0xca, 0x92, 0x7c, 0x03, 0xf3, 0x1a, 0x9a,
	0xa5, 0xd9, 0x8a, 0x33, 0x5e, 0xce, 0xdc, 0x2e, 0x56, 0xb7, 0x8f, 0xd5, 0x4d, 0x7a, 0x82, 0x3d,
	0xc1, 0x8b, 0xaf, 0x60, 0x5e, 0x0d, 0xc8, 0x08, 0xd4, 0x1f, 0x51, 0xf4, 0x13, 0x0f, 0x64, 0x95,
	0xd0, 0x38, 0xc1, 0x0a, 0x31, 0x00, 0xfd, 0x8a, 0xb6, 0x78, 0x48, 0x00, 0xf4, 0xf8, 0x6f, 0x9c,
	0xd0, 0x3d, 0x46, 0x8b, 0x14, 0x46, 0xfd, 0x15, 0xc4, 0x04, 0x8d, 0xee, 0x29, 0xdb, 0xe1, 0x81,
	0x2c, 0x57, 0x01, 0x65, 0x72, 0x6c, 0x04, 0xea, 0x86, 0xf9, 0x09, 0x1e, 0x4a, 0x01, 0xca, 0x18,
	0x46, 0x64, 0x0c, 0xc6, 0x9f, 0x15, 0x0b, 0xfd, 0x70, 0x87, 0x55, 0xa9, 0x16, 0x46, 0x89, 0xbf,
	0xa1, 0x58, 0x93, 0xac, 0x1f, 0x7e, 0x8f, 0xb0, 0x2e, 0x05, 0xb6, 0x74, 0xfd, 0x7b, 0x87, 0x8d,
	0xb5, 0xf9, 0xaf, 0x8f, 0xf3, 0xa0, 0xb7, 0x27, 0x7c, 0x79, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x5f,
	0x53, 0x1a, 0x42, 0x4f, 0x02, 0x00, 0x00,
}
