// Code generated by protoc-gen-go.
// source: hapi/release/log.proto
// DO NOT EDIT!

package release

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Allows filtering by log event source
type Log_Source int32

const (
	Log_UNKNOWN Log_Source = 0
	Log_HOOK    Log_Source = 1
	Log_TEST    Log_Source = 2
	Log_POD     Log_Source = 3
	Log_SYSTEM  Log_Source = 4
)

var Log_Source_name = map[int32]string{
	0: "UNKNOWN",
	1: "HOOK",
	2: "TEST",
	3: "POD",
	4: "SYSTEM",
}
var Log_Source_value = map[string]int32{
	"UNKNOWN": 0,
	"HOOK":    1,
	"TEST":    2,
	"POD":     3,
	"SYSTEM":  4,
}

func (x Log_Source) String() string {
	return proto.EnumName(Log_Source_name, int32(x))
}
func (Log_Source) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 0} }

// Syslog log levels
type Log_Level int32

const (
	Log_UNIVERSAL Log_Level = 0
	Log_EMERG     Log_Level = 1
	Log_ALERT     Log_Level = 2
	Log_CRIT      Log_Level = 3
	Log_ERR       Log_Level = 4
	Log_WARNING   Log_Level = 5
	Log_NOTICE    Log_Level = 6
	Log_INFO      Log_Level = 7
	Log_DEBUG     Log_Level = 8
)

var Log_Level_name = map[int32]string{
	0: "UNIVERSAL",
	1: "EMERG",
	2: "ALERT",
	3: "CRIT",
	4: "ERR",
	5: "WARNING",
	6: "NOTICE",
	7: "INFO",
	8: "DEBUG",
}
var Log_Level_value = map[string]int32{
	"UNIVERSAL": 0,
	"EMERG":     1,
	"ALERT":     2,
	"CRIT":      3,
	"ERR":       4,
	"WARNING":   5,
	"NOTICE":    6,
	"INFO":      7,
	"DEBUG":     8,
}

func (x Log_Level) String() string {
	return proto.EnumName(Log_Level_name, int32(x))
}
func (Log_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 1} }

type LogSubscription struct {
	Release string       `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
	Level   Log_Level    `protobuf:"varint,2,opt,name=level,enum=hapi.release.Log_Level" json:"level,omitempty"`
	Sources []Log_Source `protobuf:"varint,3,rep,packed,name=sources,enum=hapi.release.Log_Source" json:"sources,omitempty"`
}

func (m *LogSubscription) Reset()                    { *m = LogSubscription{} }
func (m *LogSubscription) String() string            { return proto.CompactTextString(m) }
func (*LogSubscription) ProtoMessage()               {}
func (*LogSubscription) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type Log struct {
	Release   string                     `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
	Level     Log_Level                  `protobuf:"varint,2,opt,name=level,enum=hapi.release.Log_Level" json:"level,omitempty"`
	Source    Log_Source                 `protobuf:"varint,3,opt,name=source,enum=hapi.release.Log_Source" json:"source,omitempty"`
	Log       string                     `protobuf:"bytes,4,opt,name=log" json:"log,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Log) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*LogSubscription)(nil), "hapi.release.LogSubscription")
	proto.RegisterType((*Log)(nil), "hapi.release.Log")
	proto.RegisterEnum("hapi.release.Log_Source", Log_Source_name, Log_Source_value)
	proto.RegisterEnum("hapi.release.Log_Level", Log_Level_name, Log_Level_value)
}

func init() { proto.RegisterFile("hapi/release/log.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x90, 0x4f, 0x8f, 0xd3, 0x30,
	0x10, 0xc5, 0x37, 0x75, 0xfe, 0x34, 0xb3, 0xb0, 0x58, 0x3e, 0x80, 0xb5, 0x17, 0xa2, 0x9c, 0x72,
	0xc1, 0x41, 0xe1, 0xc2, 0x09, 0xa9, 0xbb, 0x6b, 0x4a, 0xb4, 0x59, 0x07, 0x39, 0x29, 0x15, 0xdc,
	0xda, 0xca, 0x84, 0x48, 0x29, 0x8e, 0x92, 0x94, 0x8f, 0xc1, 0x17, 0xe6, 0x82, 0x9c, 0x34, 0x80,
	0x84, 0xb8, 0x71, 0x1b, 0x7b, 0x7e, 0xf3, 0xde, 0xcc, 0x83, 0xa7, 0x5f, 0x76, 0x6d, 0x1d, 0x77,
	0xaa, 0x51, 0xbb, 0x5e, 0xc5, 0x8d, 0xae, 0x58, 0xdb, 0xe9, 0x41, 0x93, 0x47, 0xe6, 0x9f, 0x9d,
	0xff, 0xaf, 0x9f, 0x57, 0x5a, 0x57, 0x8d, 0x8a, 0xc7, 0xde, 0xfe, 0xf4, 0x39, 0x1e, 0xea, 0xa3,
	0xea, 0x87, 0xdd, 0xb1, 0x9d, 0xf0, 0xf0, 0xbb, 0x05, 0x4f, 0x32, 0x5d, 0x15, 0xa7, 0x7d, 0x7f,
	0xe8, 0xea, 0x76, 0xa8, 0xf5, 0x57, 0x42, 0xc1, 0x3b, 0xcf, 0x53, 0x2b, 0xb0, 0x22, 0x5f, 0xce,
	0x4f, 0xf2, 0x02, 0x9c, 0x46, 0x7d, 0x53, 0x0d, 0x5d, 0x04, 0x56, 0x74, 0x95, 0x3c, 0x63, 0x7f,
	0x9a, 0xb1, 0x4c, 0x57, 0x2c, 0x33, 0x6d, 0x39, 0x51, 0x24, 0x01, 0xaf, 0xd7, 0xa7, 0xee, 0xa0,
	0x7a, 0x8a, 0x02, 0x14, 0x5d, 0x25, 0xf4, 0xef, 0x81, 0x62, 0x04, 0xe4, 0x0c, 0x86, 0x3f, 0x16,
	0x80, 0x32, 0x5d, 0xfd, 0xbf, 0x25, 0x5e, 0x82, 0x3b, 0x69, 0x53, 0x34, 0xf2, 0xff, 0xde, 0xe1,
	0xcc, 0x11, 0x0c, 0xa8, 0xd1, 0x15, 0xb5, 0x47, 0x5b, 0x53, 0x92, 0xd7, 0xe0, 0xff, 0x0a, 0x8e,
	0x3a, 0x81, 0x15, 0x5d, 0x26, 0xd7, 0x6c, 0x8a, 0x96, 0xcd, 0xd1, 0xb2, 0x72, 0x26, 0xe4, 0x6f,
	0x38, 0x7c, 0x03, 0xee, 0xa4, 0x4e, 0x2e, 0xc1, 0xdb, 0x88, 0x7b, 0x91, 0x6f, 0x05, 0xbe, 0x20,
	0x4b, 0xb0, 0xdf, 0xe5, 0xf9, 0x3d, 0xb6, 0x4c, 0x55, 0xf2, 0xa2, 0xc4, 0x0b, 0xe2, 0x01, 0x7a,
	0x9f, 0xdf, 0x61, 0x44, 0x00, 0xdc, 0xe2, 0x63, 0x51, 0xf2, 0x07, 0x6c, 0x87, 0x47, 0x70, 0xc6,
	0x6b, 0xc8, 0x63, 0xf0, 0x37, 0x22, 0xfd, 0xc0, 0x65, 0xb1, 0xca, 0xf0, 0x05, 0xf1, 0xc1, 0xe1,
	0x0f, 0x5c, 0xae, 0xb1, 0x65, 0xca, 0x55, 0xc6, 0xa5, 0x91, 0x58, 0x82, 0x7d, 0x2b, 0xd3, 0x12,
	0x23, 0x23, 0xc6, 0xa5, 0xc4, 0xb6, 0xb1, 0xdd, 0xae, 0xa4, 0x48, 0xc5, 0x1a, 0x3b, 0x46, 0x59,
	0xe4, 0x65, 0x7a, 0xcb, 0xb1, 0x6b, 0xd8, 0x54, 0xbc, 0xcd, 0xb1, 0x67, 0x04, 0xee, 0xf8, 0xcd,
	0x66, 0x8d, 0x97, 0x37, 0xfe, 0xa7, 0x39, 0xe6, 0xbd, 0x3b, 0x1e, 0xf6, 0xea, 0x67, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xd5, 0xde, 0x02, 0xe9, 0x69, 0x02, 0x00, 0x00,
}
